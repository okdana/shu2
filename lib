# vim: set ft=zsh:

##
# shu2 — General-purpose shell utility library for zsh scripts
#
# This file is responsible for boot-strapping the library. It should be sourced
# at the top of a consuming script, before any other code. Consumers should NOT
# attempt to load shu functions independently of the boot-strap file, since they
# are designed to operate only under the conditions produced by the
# boot-strapping process.
#
# Refer to the definition files under fn/ for function documentation.

##
# Shell options, modules
{
	# Reset options to those marked `<Z>` in `zshoptions(1)`, plus...
	emulate -R zsh \
		-o no_aliases \
		-o extended_glob \
		-o local_traps \
		-o null_glob \
		-o pipe_fail \
		-o typeset_silent \
		-o no_unset \
		-o warn_create_global

	# Always enable 'native' arithmetic functions like abs()
	zmodload zsh/mathfunc ||
	print -r >&2 'shu2: WARNING: Failed to load zsh/mathfunc module!'

	# Register some other modules for auto-loading (some of these are probably
	# already taken care of, but the only one we'll *trust* is zsh/parameter)
	zmodload -Fa zsh/datetime \
		+b:strftime \
		+p:EPOCHREALTIME \
		+p:EPOCHSECONDS \
		+p:epochtime
	zmodload -Fa zsh/files \
		+b:zf_chgrp \
		+b:zf_chown \
		+b:zf_ln \
		+b:zf_mkdir \
		+b:zf_mv \
		+b:zf_rm \
		+b:zf_rmdir \
		+b:zf_sync
	zmodload -Fa zsh/mapfile \
		+p:mapfile
	zmodload -Fa zsh/stat \
		+b:zstat
	zmodload -Fa zsh/system \
		+b:syserror \
		+b:sysopen \
		+b:sysread \
		+b:sysseek \
		+b:syswrite \
		+p:sysparams
	zmodload -Fa zsh/zselect \
		+b:zselect

	# Use high-precision session timer
	typeset -gF SECONDS
}

##
# Constants
{
	# Process start time (set as early as possible)
	declare -gr SHU_SECONDS_START=$SECONDS

	# Exit/return codes (many of these are derived from `sysexits(3)`)
	declare -gr          SHU_EX_OK=0
	declare -gr         SHU_EX_ERR=1
	declare -gr       SHU_EX_USAGE=64
	declare -gr     SHU_EX_DATAERR=65
	declare -gr     SHU_EX_NOINPUT=66
	declare -gr      SHU_EX_NOUSER=67
	declare -gr      SHU_EX_NOHOST=68
	declare -gr SHU_EX_UNAVAILABLE=69
	declare -gr    SHU_EX_SOFTWARE=70
	declare -gr       SHU_EX_OSERR=71
	declare -gr      SHU_EX_OSFILE=72
	declare -gr   SHU_EX_CANTCREAT=73
	declare -gr       SHU_EX_IOERR=74
	declare -gr    SHU_EX_TEMPFAIL=75
	declare -gr    SHU_EX_PROTOCOL=76
	declare -gr      SHU_EX_NOPERM=77
	declare -gr      SHU_EX_CONFIG=78
	declare -gr       SHU_EX_PANIC=199

	# Verbosity levels
	declare -gr SHU_VERBOSITY_Q5=-5
	declare -gr SHU_VERBOSITY_Q4=-4
	declare -gr SHU_VERBOSITY_Q3=-3
	declare -gr SHU_VERBOSITY_Q2=-2
	declare -gr SHU_VERBOSITY_Q1=-1
	declare -gr SHU_VERBOSITY_N0=0
	declare -gr SHU_VERBOSITY_V1=1
	declare -gr SHU_VERBOSITY_V2=2
	declare -gr SHU_VERBOSITY_V3=3
	declare -gr SHU_VERBOSITY_V4=4
	declare -gr SHU_VERBOSITY_V5=5
	declare -gr  SHU_VERBOSITY_Q=-1
	declare -gr  SHU_VERBOSITY_N=0
	declare -gr  SHU_VERBOSITY_V=1

	# Glob patterns (use like `[[ $foo == $~SHU_PAT_MATH_INT ]]`)
	declare -gr   SHU_PAT_MATH_INT_NEG='-[0-9][0-9_]#'
	declare -gr   SHU_PAT_MATH_INT_POS='(|+)[0-9][0-9_]#'
	declare -gr       SHU_PAT_MATH_INT='(|[+-])[0-9][0-9_]#'
	declare -gr SHU_PAT_MATH_FLOAT_NEG='(|-)((|[0-9][0-9_]#).[0-9][0-9_]#|[0-9][0-9_]#.)'
	declare -gr SHU_PAT_MATH_FLOAT_POS='(|+)((|[0-9][0-9_]#).[0-9][0-9_]#|[0-9][0-9_]#.)'
	declare -gr     SHU_PAT_MATH_FLOAT='(|[+-])((|[0-9][0-9_]#).[0-9][0-9_]#|[0-9][0-9_]#.)'
	declare -gr   SHU_PAT_MATH_NUM_NEG="(${SHU_PAT_MATH_INT_NEG}|${SHU_PAT_MATH_FLOAT_NEG})"
	declare -gr   SHU_PAT_MATH_NUM_POS="(${SHU_PAT_MATH_INT_POS}|${SHU_PAT_MATH_FLOAT_POS})"
	declare -gr       SHU_PAT_MATH_NUM="(${SHU_PAT_MATH_INT}|${SHU_PAT_MATH_FLOAT})"
	declare -gr    SHU_PAT_ASCII_ALNUM='[A-Za-z0-9]##'
	declare -gr    SHU_PAT_ASCII_ALPHA='[A-Za-z]##'
	declare -gr    SHU_PAT_ASCII_CNTRL=$'[\000-\037\177]##'
	declare -gr    SHU_PAT_ASCII_DIGIT='[0-9]##'
	declare -gr    SHU_PAT_ASCII_LOWER='[a-z]##'
	declare -gr    SHU_PAT_ASCII_PUNCT="[]!\"#\$%&'()*+,./:;<=>?@[\\^_\`{|}~,-]##"
	declare -gr    SHU_PAT_ASCII_SPACE=$'[ \n\r\t\013\014]##'
	declare -gr    SHU_PAT_ASCII_UPPER='[A-Z]##'
	declare -gr     SHU_PAT_ASCII_WORD='[A-Za-z0-9_]##'
	declare -gr   SHU_PAT_ASCII_XDIGIT='[0-9A-Fa-f]##'

	# Time formats (note: there's no portable way to represent RFC 3339 or
	# ISO-8601's 'extended' format using just a format string)
	declare -gr   SHU_TIME_FMT_STD_A='%F %T'
	declare -gr   SHU_TIME_FMT_STD_B='%a %F %T'
	declare -gr   SHU_TIME_FMT_STD_C='%a %F %T %Z'
	declare -gr SHU_TIME_FMT_ISO8601='%Y%m%dT%H%M%S%z'
	declare -gr  SHU_TIME_FMT_RFC822='%a, %d %b %y %T %z'
	declare -gr  SHU_TIME_FMT_RFC850='%A, %d-%b-%y %T %Z'
	declare -gr     SHU_TIME_FMT_RSS='%a, %d %b %Y %T %z'
	declare -gr  SHU_TIME_FMT_COOKIE='%A, %d-%b-%Y %T %Z'

	# ANSI SGR escape sequences (for the most part we're not going to worry about
	# strange terminals that don't support these; users can set SHU_ANSI_ENABLE=0
	# if they need to)
	declare -gr          SHU_ANSI_RESET=$'\e[0m'
	declare -gr        SHU_ANSI_BOLD_ON=$'\e[1m'
	declare -gr         SHU_ANSI_DIM_ON=$'\e[2m'
	declare -gr      SHU_ANSI_ITALIC_ON=$'\e[3m'
	declare -gr  SHU_ANSI_UNDERSCORE_ON=$'\e[4m'
	declare -gr       SHU_ANSI_BLINK_ON=$'\e[5m'
	declare -gr     SHU_ANSI_REVERSE_ON=$'\e[7m'
	declare -gr       SHU_ANSI_BOLD_OFF=$'\e[22m' # Yes, 22m, NOT 21m!
	declare -gr        SHU_ANSI_DIM_OFF=$'\e[22m'
	declare -gr     SHU_ANSI_ITALIC_OFF=$'\e[23m'
	declare -gr SHU_ANSI_UNDERSCORE_OFF=$'\e[24m'
	declare -gr      SHU_ANSI_BLINK_OFF=$'\e[25m'
	declare -gr    SHU_ANSI_REVERSE_OFF=$'\e[27m'
	declare -gr       SHU_ANSI_FG_BLACK=$'\e[38;5;0m'
	declare -gr         SHU_ANSI_FG_RED=$'\e[38;5;1m'
	declare -gr       SHU_ANSI_FG_GREEN=$'\e[38;5;2m'
	declare -gr      SHU_ANSI_FG_YELLOW=$'\e[38;5;3m'
	declare -gr        SHU_ANSI_FG_BLUE=$'\e[38;5;4m'
	declare -gr     SHU_ANSI_FG_MAGENTA=$'\e[38;5;5m'
	declare -gr        SHU_ANSI_FG_CYAN=$'\e[38;5;6m'
	declare -gr       SHU_ANSI_FG_WHITE=$'\e[38;5;7m'
	declare -gr      SHU_ANSI_FG_BLACK2=$'\e[38;5;8m'
	declare -gr        SHU_ANSI_FG_RED2=$'\e[38;5;9m'
	declare -gr      SHU_ANSI_FG_GREEN2=$'\e[38;5;10m'
	declare -gr     SHU_ANSI_FG_YELLOW2=$'\e[38;5;11m'
	declare -gr       SHU_ANSI_FG_BLUE2=$'\e[38;5;12m'
	declare -gr    SHU_ANSI_FG_MAGENTA2=$'\e[38;5;13m'
	declare -gr       SHU_ANSI_FG_CYAN2=$'\e[38;5;14m'
	declare -gr      SHU_ANSI_FG_WHITE2=$'\e[38;5;15m'
	declare -gr       SHU_ANSI_FG_RESET=$'\e[39m'
	declare -gr       SHU_ANSI_BG_BLACK=$'\e[48;5;0m'
	declare -gr         SHU_ANSI_BG_RED=$'\e[48;5;1m'
	declare -gr       SHU_ANSI_BG_GREEN=$'\e[48;5;2m'
	declare -gr      SHU_ANSI_BG_YELLOW=$'\e[48;5;3m'
	declare -gr        SHU_ANSI_BG_BLUE=$'\e[48;5;4m'
	declare -gr     SHU_ANSI_BG_MAGENTA=$'\e[48;5;5m'
	declare -gr        SHU_ANSI_BG_CYAN=$'\e[48;5;6m'
	declare -gr       SHU_ANSI_BG_WHITE=$'\e[48;5;7m'
	declare -gr      SHU_ANSI_BG_BLACK2=$'\e[48;5;8m'
	declare -gr        SHU_ANSI_BG_RED2=$'\e[48;5;9m'
	declare -gr      SHU_ANSI_BG_GREEN2=$'\e[48;5;10m'
	declare -gr     SHU_ANSI_BG_YELLOW2=$'\e[48;5;11m'
	declare -gr       SHU_ANSI_BG_BLUE2=$'\e[48;5;12m'
	declare -gr    SHU_ANSI_BG_MAGENTA2=$'\e[48;5;13m'
	declare -gr       SHU_ANSI_BG_CYAN2=$'\e[48;5;14m'
	declare -gr      SHU_ANSI_BG_WHITE2=$'\e[48;5;15m'
	declare -gr       SHU_ANSI_BG_RESET=$'\e[49m'

	# If we have a 256-colour terminal we can additionally define some more
	# precise colours to be used in select cases. (Some people make the 'black'
	# and 'white' colours in the standard 16 various shades of grey, so they might
	# look faded on a red background for example. Of course, maybe they also set
	# their red to a weird colour... but this is at least *more* accurate)
	if
		[[ $TERM == *(256c|gnome|konsole|putty)* ]] ||
		[[ ${VTE_VERSION:+256c} == 256c ]] ||
		[[ ${KONSOLE_DBUS_SESSION:+256c} == 256c ]]
	then
		declare -gr SHU_ANSI_FG_BLACK0=$'\e[38;5;16m'
		declare -gr SHU_ANSI_FG_WHITE0=$'\e[38;5;231m'
	# If we don't have 256 colours, just fall back
	else
		declare -gr SHU_ANSI_FG_BLACK0=$SHU_ANSI_FG_BLACK
		declare -gr SHU_ANSI_FG_WHITE0=$SHU_ANSI_FG_WHITE
	fi

	declare -grA SHU_ANSI_ACTIVE=(
		reset          $SHU_ANSI_RESET
		bold:on        $SHU_ANSI_BOLD_ON
		dim:on         $SHU_ANSI_DIM_ON
		italic:on      $SHU_ANSI_ITALIC_ON
		underscore:on  $SHU_ANSI_UNDERSCORE_ON
		blink:on       $SHU_ANSI_BLINK_ON
		reverse:on     $SHU_ANSI_REVERSE_ON
		bold:off       $SHU_ANSI_BOLD_OFF
		dim:off        $SHU_ANSI_DIM_OFF
		italic:off     $SHU_ANSI_ITALIC_OFF
		underscore:off $SHU_ANSI_UNDERSCORE_OFF
		blink:off      $SHU_ANSI_BLINK_OFF
		reverse_off    $SHU_ANSI_REVERSE_OFF
		fg:black       $SHU_ANSI_FG_BLACK
		fg:red         $SHU_ANSI_FG_RED
		fg:green       $SHU_ANSI_FG_GREEN
		fg:yellow      $SHU_ANSI_FG_YELLOW
		fg:blue        $SHU_ANSI_FG_BLUE
		fg:magenta     $SHU_ANSI_FG_MAGENTA
		fg:cyan        $SHU_ANSI_FG_CYAN
		fg:white       $SHU_ANSI_FG_WHITE
		fg:black2      $SHU_ANSI_FG_BLACK2
		fg:red2        $SHU_ANSI_FG_RED2
		fg:green2      $SHU_ANSI_FG_GREEN2
		fg:yellow2     $SHU_ANSI_FG_YELLOW2
		fg:blue2       $SHU_ANSI_FG_BLUE2
		fg:magenta2    $SHU_ANSI_FG_MAGENTA2
		fg:cyan2       $SHU_ANSI_FG_CYAN2
		fg:white2      $SHU_ANSI_FG_WHITE2
		fg:black0      $SHU_ANSI_FG_BLACK0
		fg:white0      $SHU_ANSI_FG_WHITE0
		fg:reset       $SHU_ANSI_FG_RESET
		bg:black       $SHU_ANSI_BG_BLACK
		bg:red         $SHU_ANSI_BG_RED
		bg:green       $SHU_ANSI_BG_GREEN
		bg:yellow      $SHU_ANSI_BG_YELLOW
		bg:blue        $SHU_ANSI_BG_BLUE
		bg:magenta     $SHU_ANSI_BG_MAGENTA
		bg:cyan        $SHU_ANSI_BG_CYAN
		bg:white       $SHU_ANSI_BG_WHITE
		bg:black2      $SHU_ANSI_BG_BLACK2
		bg:red2        $SHU_ANSI_BG_RED2
		bg:green2      $SHU_ANSI_BG_GREEN2
		bg:yellow2     $SHU_ANSI_BG_YELLOW2
		bg:blue2       $SHU_ANSI_BG_BLUE2
		bg:magenta2    $SHU_ANSI_BG_MAGENTA2
		bg:cyan2       $SHU_ANSI_BG_CYAN2
		bg:white2      $SHU_ANSI_BG_WHITE2
		bg:reset       $SHU_ANSI_BG_RESET
	)

	declare -grA SHU_ANSI_INACTIVE=(
		reset          ''
		bold:on        ''
		dim:on         ''
		italic:on      ''
		underscore:on  ''
		blink:on       ''
		reverse        ''
		bold:off       ''
		dim:off        ''
		italic:off     ''
		underscore:off ''
		blink:off      ''
		reverse:off    ''
		fg:black       ''
		fg:red         ''
		fg:green       ''
		fg:yellow      ''
		fg:blue        ''
		fg:magenta     ''
		fg:cyan        ''
		fg:white       ''
		fg:black2      ''
		fg:red2        ''
		fg:green2      ''
		fg:yellow2     ''
		fg:blue2       ''
		fg:magenta2    ''
		fg:cyan2       ''
		fg:white2      ''
		fg:black0      ''
		fg:white0      ''
		fg:reset       ''
		bg:black       ''
		bg:red         ''
		bg:green       ''
		bg:yellow      ''
		bg:blue        ''
		bg:magenta     ''
		bg:cyan        ''
		bg:white       ''
		bg:black2      ''
		bg:red2        ''
		bg:green2      ''
		bg:yellow2     ''
		bg:blue2       ''
		bg:magenta2    ''
		bg:cyan2       ''
		bg:white2      ''
		bg:reset       ''
	)

	# Determine up-front whether we're on a TTY, so we can decide things like
	# colouration and interactivity later
	if [[ -t 1 ]]; then
		declare -gr SHU_HAS_TTY=1
	else
		declare -gr SHU_HAS_TTY=0
	fi

	# Emulate `ZSH_ARGZERO` for versions of zsh that don't have it; this way we
	# can leave `function_argzero` enabled without sacrificing access to the name
	# of the actual script
	() {
		setopt local_options posix_argzero
		declare -gr      SHU_ARGZERO=$0
		declare -gr  SHU_ARGZERO_ABS=${0:a}
		declare -gr SHU_ARGZERO_TAIL=${0:t}
	}

	# Absolute paths to the fn/ directory and digest file
	declare -gr    SHU_FN_DIR=${${${(%):-%N}:A}:h}/fn
	declare -gr SHU_FN_DIGEST=$SHU_FN_DIR.zwc
}

##
# 'Safe' global parameters
{
	# Script name — may be overridden by the consumer
	declare -g SHU_SCRIPT_NAME=$SHU_ARGZERO_TAIL

	# Back-ups of standard FDs — see below
	declare -g SHU_FD_STDOUT=1
	declare -g SHU_FD_STDERR=2

	# Output verbosity level
	declare -g SHU_VERBOSITY=$SHU_VERBOSITY_N0

	# Panic ignore level — if >0, `shu::panic` won't kill the script. This is
	# intended mostly for use by scripts; we don't allow users to pass this down
	# through the environment
	declare -g SHU_PANIC_IGNORE=0

	# Panic trace-back level — if >0, `shu::panic` will show a trace-back. If >1,
	# `shu::panic` will print extra trace information. Unlike the ignore level,
	# we'll allow users to control this through the environment
	if [[ ${SHU_PANIC_TRACE:-} == [0-9]## ]]; then
		declare -gx SHU_PANIC_TRACE=$SHU_PANIC_TRACE
	else
		declare -gx SHU_PANIC_TRACE=0
	fi

	# Force ANSI SGR usage — we'll allow users to control this through the
	# environment as well. If scripts want to override it (which they *usually*
	# shouldn't, they can do it by resetting the `SHU_ANSI` array
	if [[ ${SHU_ANSI_ENABLE:-} == (always|[1tTyY]*) ]]; then
		declare -gx SHU_ANSI_ENABLE=1
	elif [[ ${SHU_ANSI_ENABLE:-} == (never|[0fFnN]*) ]]; then
		declare -gx SHU_ANSI_ENABLE=0
	elif (( ! SHU_HAS_TTY )) || [[ $TERM == dumb ]]; then
		declare -gx SHU_ANSI_ENABLE=0
	else
		declare -gx SHU_ANSI_ENABLE=1
	fi
}

##
# Environment sanitisation
# @todo Move out into a consumer library
{
	# Used by zsh
	unset -v \
		IFS \
		NULLCMD \
		PROMPT \
		PS1 \
		READNULLCMD \
		REPLY \
		REPORTMEMORY \
		REPORTTIME \
		RPROMPT \
		RPS1 \
		TIMEFMT \
		TMOUT \
		TMPPREFIX \
		TMPSUFFIX \
		WATCHFMT \
		ZBEEP

	    NULLCMD=cat
	     PROMPT='%% '
	READNULLCMD=cat
	  TMPPREFIX=/tmp/zsh

	# Used by external tools
	unset -v \
		BLOCKSIZE \
		BZIP{,2} \
		DEBCONF_FRONTEND \
		GREP \
		MAGIC \
		NMAP_{,UN}PRIVILEGED \
		PERL5LIB \
		POSIXLY_CORRECT \
		QUOTING_STYLE \
		TIME \
		TREE_CHARSET \
		UNZIP \
		XZ_{DEFAULTS,OPT} \
		ZIP{INFO,OPT}
	unset -vm \
		'*_OPTIONS' \
		'*_PROXY' \
		'*_proxy' \
		'GIT_*' \
		'PG*' \
		'RSYNC_*'

	# Some tools can freak out if no TERM is set
	declare -gx TERM=${TERM:-xterm}
}

##
# Misc. set-up
{
	# We create back-ups of these in case we need to bypass redirection later
	# (see e.g. `shu::panic`)
	exec {SHU_FD_STDOUT}>&1
	exec {SHU_FD_STDERR}>&2

	# Populate SHU_ANSI array by default if we're at a TTY
	if (( SHU_ANSI_ENABLE )); then
		declare -gA SHU_ANSI=( "${(@kv)SHU_ANSI_ACTIVE}" )
	else
		declare -gA SHU_ANSI=( "${(@kv)SHU_ANSI_INACTIVE}" )
	fi

	# Colourise PS4 if we're on a TTY and don't have any colours already
	[[ $PS4 != *$'\e['* ]] &&
	PS4="${SHU_ANSI[reset]}${SHU_ANSI[dim:on]}${PS4}${SHU_ANSI[dim:off]}"
}

##
# Function registration
{
	# Use the digest file if we have it (note: this of course means that zsh's
	# usually mechanism for detecting newer versions of the functions won't work;
	# if a function is changed, the digest must be deleted or recompiled)
	if [[ -e $SHU_FN_DIGEST ]]; then
		fpath=( $SHU_FN_DIGEST $fpath )
		autoload -w $SHU_FN_DIGEST
	# Otherwise load from separate files
	else
		fpath=( $SHU_FN_DIR $fpath )
		autoload -Uz $SHU_FN_DIR/*:*(-.)
	fi

	# Maths functions not provided directly by zsh/mathfunc
	functions -M min 1 -1 shu:math:min
	functions -M max 1 -1 shu:math:max
	functions -M sum 1 -1 shu:math:sum

	shu::noop() { }
}
