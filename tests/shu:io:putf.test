#!/usr/bin/env zsh

##
# shu-unit tests for shu:io:putf() and shu:io:eputf()

fn=${0:t:r}

@assert -d 'Returns 0 with no arguments' \
  -r 0 -eq \
  $fn
@assert -d 'Returns 0 with multiple operands' \
  -r 0 -eq \
  $fn '%s' bar baz

# option:verbosity:expected
provider=(
  :{Q5,Q2,Q1}:
  :{N0,V1,V2,V5}:foo

  -a:{Q5,Q2,Q1,N0,V1,V2,V5}:foo

  -n:{Q5,Q2,Q1}:
  -n:{N0,V1,V2,V5}:foo

  -N:{Q5,Q2,Q1,N0}:foo
  -N:{V1,V2,V5}:

  -q:{Q5,Q2}:
  -q:{Q1,N0,V1,V2,V5}:foo

  -qq:Q5:
  -qq:{Q2,Q1,N0,V1,V2,V5}:foo

  -Q:{Q5,Q2,Q1}:foo
  -Q:{N0,V1,V2,V5}:

  -QQ:{Q5,Q2}:foo
  -QQ:{Q1,N0,V1,V2,V5}:

  -v:{Q5,Q2,Q1,N0}:
  -v:{V1,V2,V5}:foo

  -vv:{Q5,Q2,Q1,N0,V1}:
  -vv:{V2,V5}:foo

  -V:{Q5,Q2,Q1,N0,V1}:foo
  -V:{V2,V5}:

  -VV:{Q5,Q2,Q1,N0,V1,V2}:foo
  -VV:V5:

  -xn:{Q5,Q2,Q1}:
  -xn:N0:foo
  -xn:{V1,V2,V5}:

  -xq:{Q5,Q2}:
  -xq:Q1:foo
  -xq:{N0,V1,V2,V5}:

  -xqq:Q5:
  -xqq:Q2:foo
  -xqq:{Q1,N0,V1,V2,V5}:

  -xv:{Q5,Q2,Q1,N0}:
  -xv:V1:foo
  -xv:{V2,V5}:

  -xvv:{Q5,Q2,Q1,N0,V1}:
  -xvv:V2:foo
  -xvv:V5:
)

for p in $provider; do
  pa=( "${(@s<:>)p}" )

  if [[ -n $pa[1] ]]; then
    like="with option(s) ${pa[1]}"
  else
    like='by default'
  fi

  [[ -n $pa[3] ]] &&
  [[ $fn == *:*:eput* ]] &&
  pa[3]="${pa[3]%%[^[:space:]]*}$SHU_SCRIPT_NAME: ${pa[3]##[[:space:]]##}"

  @assert -d "Behaves as expected $like given verbosity ${pa[2]}" \
    -e "${pa[3]}" -eq \
    "SHU_VERBOSITY=\$SHU_VERBOSITY_${pa[2]}; $fn ${pa[1]} %s foo"
done

pre=
[[ $fn == *:*:eput* ]] && pre='?##: '

@assert -d 'Behaves as expected given one specifier with multiple operands' \
  "${pre}xfoox/${pre}xbarx/${pre}xbazx/" -gl \
  $fn x%sx/ foo bar baz
@assert -d 'Behaves as expected given multiple specifiers with equal operands' \
  "${pre}foo/bar/baz" -gl \
  $fn '%s/%s/%s' foo bar baz

for p in -Y +Y +v; do
  @assert -d "Panics with illegal option $p" \
    -r SHU_EX_PANIC -eq \
    $fn $p
done
