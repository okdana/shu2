# vim: set ft=zsh:

##
# Prints a formatted string.
#
# @module core
#
# @see printf
# @see shu::puts
#
# @param -a, -n, -q, -qq, -v, -vv, -vvv (optional) See `shu::puts`.
#
# @param $1
#   (optional) A `printf` format string (e.g., `Hello, %s!\n`). The format
#   string is taken verbatim; it is not altered to add new-lines or any other
#   characters. If this argument is not supplied, an empty string will be
#   substituted (this differs from `printf`).
#
# @param $2 ...
#   (optional) Zero or more strings to treat as arguments to the format string.
#   Refer to the `printf` documentation regarding the expected behaviour when
#   the number of format specifiers differs from the number of arguments. Empty
#   arguments are **not** elided.
#
# @return According to `printf`.
shu::putf() {
	case ${1:-} in
		--)
			;;
		-a)
			shift
			;;
		-n)
			(( SHU_VERBOSITY == SHU_VERBOSITY_NORMAL )) || return 0
			shift
			;;
		-q)
			(( SHU_VERBOSITY <= SHU_VERBOSITY_QUIET )) || return 0
			shift
			;;
		-qq)
			(( SHU_VERBOSITY <= SHU_VERBOSITY_VERY_QUIET )) || return 0
			shift
			;;
		-v)
			(( SHU_VERBOSITY >= SHU_VERBOSITY_VERBOSE )) || return 0
			shift
			;;
		-vv)
			(( SHU_VERBOSITY >= SHU_VERBOSITY_VERY_VERBOSE )) || return 0
			shift
			;;
		-vvv)
			(( SHU_VERBOSITY >= SHU_VERBOSITY_DEBUG )) || return 0
			shift
			;;
		[+-]*)
			shu::panic "Invalid option: ${1}"
			;;
		*)
			(( SHU_VERBOSITY < SHU_VERBOSITY_NORMAL )) && return 0
			;;
	esac

	[[ ${1:-} == -- ]] && shift

	(( $# )) || 1=''

	printf -- "${@}"
	return $?
}
