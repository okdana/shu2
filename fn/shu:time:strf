# vim: set ft=zsh:

##
# Formats epoch time.
#
# This function requires the `strftime` built-in provided by the `zsh/datetime`
# module.
#
# @module time
#
# @see zsh/datetime
# @see strftime(3)
#
# @param +s <name>
#   (optional) Assign the result to a pre-defined scalar with the name <name>.
#
# @param -u
#   (optional) Use UTC instead of the default time zone.
#
# @param -z <tz>
#   (optional) Use <tz> instead of the default time zone. It is generally not
#   possible to validate the time-zone value accurately, but in the interest of
#   catching the most common mistake, the function will panic if <tz> contains
#   a `%` (percentage symbol).
#
# @param $1
#   (optional) The name of a `SHU_TIME_FMT_*` constant or a format string
#   suitable for `strftime(3)`. Defaults to `SHU_TIME_FMT_STD_A`.
#
# @param $2
#   (optional) An epoch time to format. Defaults to the current epoch time.
#
# @return According to `strftime`.
shu:time:strf() {
	local    OPTARG OPTIND __opt __to_scalar __tz
	local -a __args

	while getopts ':s:uz:' __opt; do
		case $__opt in
			# Assign result to scalar
			'+s')
				(( ${(P)+OPTARG} )) ||
				shu::panic "No such scalar: ${OPTARG}"
				[[ "${(Pt)OPTARG}-" == scalar-* ]] ||
				shu::panic "No such scalar: ${OPTARG}"

				__to_scalar=$OPTARG
				;;
			# UTC time zone
			'u') __tz='UTC' ;;
			# Custom time zone
			'z')
				[[ $OPTARG == *'%'* ]] &&
				shu::panic "Invalid time zone: ${OPTARG}"

				__tz=$OPTARG
				;;
			# Errors
			':') shu::panic "Missing argument to option: ${(l:2::-:)OPTARG}" ;;
			'?') shu::panic "Invalid option: ${(l:2::-:)OPTARG}" ;;
			*)   shu::panic "Invalid option: ${(l:2::-:)__opt}" ;;
		esac
	done

	shift $(( OPTIND - 1 ))

	(( $# > 2 )) && shu::panic 'Too many arguments'

	: ${__tz:=${TZ:-}}

	if [[ ${${1:-}#SHU_TIME_} == FMT_[A-Z0-9_]# ]]; then
		1="SHU_TIME_${1#SHU_TIME_}"

		(( ${(P)+1} )) ||
		shu::panic "No such time format: ${1:-}"

		1=${(P)1}
	elif [[ ${1:-%} != *'%'* ]]; then
		shu::panic "No time specifier provided: ${1:-}"
	fi

	(( $#__to_scalar )) && __args+=( -s $__to_scalar )
	__args+=( -- ${1:-${SHU_TIME_FMT_STD_A}} ${2:-${EPOCHSECONDS}} )

	TZ=$__tz builtin strftime $__args
	return $?
}
