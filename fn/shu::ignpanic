# vim: set ft=zsh:

##
# Controls whether panics are ignored.
#
# Note 1: This function can only modify the panic-ignore level for the current
# shell (and its future descendants). It does **not** affect the level set for
# the ancestors of a sub-shell. The level setting persists until either the
# function is called again to change it or the shell exits.
#
# Note 2: This is **not** a replacement for try/catch (which shu doesn't
# provide). The ability to ignore panics is intended only to be used in edge
# cases where for example a script needs to be compatible with older versions of
# the library in which a particular condition used to cause a panic. You should
# not use this as a general error-control feature!
#
# @module core
#
# @see shu::panic
#
# @param $1
#   (optional) The panic-ignore level. Accepted values are:
#
#   * `-` or `0` — Do not ignore panics.
#   * `1`        — Ignore panics, but print the resulting error messages.
#   * `+` or `2` — Silently ignore panics.
#
#   If no argument is provided, `2` is assumed. An empty string is **not**
#   acceptable.
#
# @return 0
shu::ignpanic() {
	[[ ${1:-} == -- ]] && shift

	(( $# > 1 )) && shu::panic 'Too many arguments'

	(( $# )) || 1=2

	case $1 in
		-|0|-0) SHU_IGN_PANIC=0 ;;
		1|-1)   SHU_IGN_PANIC=1 ;;
		+|2|-2) SHU_IGN_PANIC=2 ;;
		*)      shu::panic "Invalid argument: ${1}" ;;
	esac

	return 0
}
