# vim: set ft=zsh:

##
# Parse the documentation out of a shu source file.
#
# shu documentation blocks begin at the first line consisting of `##` and end at
# the first line that doesn't begin with a `#`. Hard tabs must **not** be used
# within usage-help blocks.
#
# @module meta
#
# @param +a <name>
#   (optional) Assign the result to a pre-defined array with the name <name>.
#
# @param +c
#   (optional) Enable ANSI formatting.
#
# @param +C
#   (optional) Disable ANSI formatting.
#
# @param -r
#   (optional) Return raw (unformatted) lines.
#
# @param $1
#   The path to the source file, or the name of a function whose definition file
#   should be looked up.
#
# @return 0 on success, >0 on error.

local    OPTARG OPTIND MATCH MBEGIN MEND
local    opt__ to_array__ raw__ fn___ line__ last__
local -a lines__ doc__
local -A ansi__=( "${(@kv)SHU_ANSI}" )

while getopts :a:cCr opt__; do
  case $opt__ in
    # Assign result to array
    +a)
      (( ${(P)+OPTARG} )) ||
      shu::panic "No such array: $OPTARG"

      if [[ "${(Pt)OPTARG}-" != array-* ]] || [[ $OPTARG == *\[* ]]; then
        shu::panic "No such array: $OPTARG"
      fi

      to_array__=$OPTARG
      ;;
    # Enable ANSI formatting
    +c) ansi__=( "${(@kv)SHU_ANSI_ACTIVE}" ) ;;
    # Disable ANSI formatting
    +C) ansi__=( "${(@kv)SHU_ANSI_INACTIVE}" ) ;;
    # Return raw/unformatted lines
    r) raw__=1 ;;
    # Errors
    ':') shu::panic "Missing argument to option: ${(l:2::-:)OPTARG}" ;;
    '?') opt__=$OPTARG ;&
    *)   shu::panic "Invalid option: ${(l:2::-:)opt__}" ;;
  esac
done

shift $(( OPTIND - 1 ))

(( $# < 1 )) && shu::panic 'Too few operands'
(( $# > 1 )) && shu::panic 'Too many operands'

fn___=$1

(( $+functions[$fn___] )) && [[ ! -e $fn___ ]] && {
  shu:meta:fnpath +s fn___ -- $fn___
  (( $#fn___ )) || return 1
}

if [[ $fn___ == *.zwc/* ]] && [[ -e ${fn___/.zwc\///} ]]; then
  fn___=${fn___/.zwc\///}
elif [[ $fn___ == *.zwc ]] && [[ -e ${fn___:r} ]]; then
  fn___=${fn___:r}
elif [[ ! -e $fn___ ]]; then
  return 1
fi

lines__=( "${(@f)mapfile[$fn___]:-}" )

for line__ in "${(@)lines__}"; do
  [[ -n $last__ ]] || {
    [[ $line__ == [[:space:]]#\#\# ]] || continue
    last__=$line__
    (( raw__ )) && doc__+=( $line__ )
    continue
  }

  [[ $line__ == [[:space:]]#\#(|\ *) ]] || break

  (( raw__ )) && {
    last__=$line__
    doc__+=( $line__ )
    continue
  }

  (( $#line__ > 2 )) || {
    doc__+=( '' )
    continue
  }

  line__=${line__[3,-1]}
  line__=${line__/(#m)(#s)@[^[:space:]]##/${ansi__[bold:on]}${MATCH}${ansi__[bold:off]}}

  doc__+=( "$line__" )
done

(( $#to_array__ )) && {
  : ${(PA)to_array__::="${(@)doc__}"}
  return $(( ! $#doc__ ))
}

(( $#doc__ )) || return 1
print -rl -- "${(@)doc__}"
