# vim: set ft=zsh:

##
# Print a formatted string.
#
# When called as `shu:io:eputf`, the output is prefixed by the base name of the
# current script and sent to `stderr` (suitable for a general error message).
#
# When called as `shu:io:uputf`, the output is prefixed by the base name of the
# current script, followed by its usage synopsis (if any), and sent to `stderr`
# (suitable for a usage-error message). Note that this variant lacks the
# indentation options of `shu:io:uputs`.
#
# @module io
#
# @see printf
# @see shu:io:puts
#
# @param -a, -n, -N, -q, -Q, -r, -R, -v, -V, -x, -X
#   (optional) See `shu:io:puts`.
#
# @param $1
#   (optional) A `printf` format string (e.g., `Hello, %s!\n`). The `eputf` and
#   `uputf` variants of the function prepend the script name to the format
#   string, but otherwise it is taken verbatim, without adding new-lines or
#   similar. If this argument is not supplied, an empty string will be
#   substituted (this differs from `printf`).
#
# @param $2 ...
#   (optional) Zero or more strings to treat as arguments to the format string.
#   Refer to the `printf` documentation regarding the expected behaviour when
#   the number of format specifiers differs from the number of arguments. Empty
#   arguments are **not** elided.
#
# @return According to `printf`.

local OPTARG OPTIND opt last_opt
local cmp=$SHU_VERBOSITY_N0 op='<=' trap_ret=-1 exact ret
local -a usage

while getopts :anNqQrR:vVxX opt; do
  # Clauses here are ordered roughly according to frequency of use
  case $opt in
    v|V)
      if [[ $last_opt == $opt ]]; then
        (( cmp < SHU_VERBOSITY_V5 )) && (( cmp++ ))
      else
        cmp=$SHU_VERBOSITY_V1
         op='<='
        [[ $opt == V ]] && op='>='
      fi
      ;;
    q|Q)
      if [[ $last_opt == $opt ]]; then
        (( cmp > SHU_VERBOSITY_Q5 )) && (( cmp-- ))
      else
        cmp=$SHU_VERBOSITY_Q1
         op='<='
        [[ $opt == Q ]] && op='>='
      fi
      ;;
    n|N)
      cmp=$SHU_VERBOSITY_N0
       op='<='
      [[ $opt == N ]] && op='>='
      ;;
    a)
      cmp=$SHU_VERBOSITY
       op='=='
      ;;
    r)
      case $0 in
        shu:io:putf)  trap_ret=$SHU_EX_OK ;;
        shu:io:eputf) trap_ret=$SHU_EX_ERR ;;
        shu:io:uputf) trap_ret=$SHU_EX_USAGE ;;
      esac
      ;;
    R)
      if [[ $OPTARG == <0-255> ]]; then
        trap_ret=$OPTARG
      elif [[ ${(P)OPTARG:-} == <0-255> ]]; then
        trap_ret=${(P)OPTARG}
      else
        shu::panic "Illegal return status: ${OPTARG}"
      fi
      ;;
    x) exact=1 ;;
    X) exact=0 ;;
    # Errors
    ':') shu::panic "Missing argument to option: ${(l:2::-:)OPTARG}" ;;
    '?') shu::panic "Invalid option: ${(l:2::-:)OPTARG}" ;;
    *)   shu::panic "Invalid option: ${(l:2::-:)opt}" ;;
  esac
  last_opt=$opt
done

(( trap_ret > -1 )) &&
trap "return ${trap_ret}" EXIT

(( exact )) && op='=='
(( cmp $op SHU_VERBOSITY )) || return 0

shift $(( OPTIND - 1 ))

(( $# )) || 1=

case $0 in
  shu:io:putf)
    printf -- "${@}"
    return
    ;;
  shu:io:eputf)
    [[ -n $* ]] || return 0
    printf -- >&2 "${${${SHU_SCRIPT_NAME}//\%/%%}//\\/\\\\}: ${1}" "${@:2}"
    return
    ;;
  shu:io:uputf)
    [[ -n $* ]] && {
      printf -- >&2 "${${${SHU_SCRIPT_NAME}//\%/%%}//\\/\\\\}: ${1}" "${@:2}" ||
      ret=$?
    }

    shu:meta:help +a usage -u

    (( $#usage )) && {
      print -rl -- >&2 "${(@)usage}" || ret=$?
    }

    return ret
    ;;
esac

shu::panic
