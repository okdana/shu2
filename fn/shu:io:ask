# vim: set ft=zsh:

##
# Prompt the user to enter yes or no.
#
# @todo It would be nice to build this into a more general-purpose prompt/menu
# function.
#
# @module io
#
# @see read
# @see vared
#
# @param +s <name>
#   (optional) Assign the user's final input to a pre-defined scalar with the
#   name <name>.
#
# @param +v <options>
#   (optional) Verbosity options to pass to `shu:io:putf`. For example,
#   `shu:io:askyn +v -v` will only display a prompt when the verbosity is `V0`
#   or higher. These options also apply to error messages.
#
# @param -n
#   (optional) Treat empty input as a 'no' response.
#
# @param -y
#   (optional) Treat empty input as a 'yes' response.
#
# @param $1 ...
#   (optional) Zero or more strings to be used as the prompt/question. All
#   strings are passed to `shu:io:putf` for printing. If omitted, the prompt
#   string 'Continue?' is used.
#
# @return According to `printf`.

local OPTARG OPTIND opt__ to_scalar__
local default__ prompt__ reply__
local -a vrb_opts__

while getopts :ns:v:y opt__; do
  case $opt__ in
    # Assign result to scalar
    +s)
      (( ${(P)+OPTARG} )) ||
      shu::panic "No such scalar: ${OPTARG}"

      if [[ "${(Pt)OPTARG}-" != scalar-* ]] && [[ $OPTARG != *\[* ]]; then
        shu::panic "No such scalar: ${OPTARG}"
      fi

      to_scalar__=$OPTARG
      ;;
    # Pass verbosity options to `shu:io:puts`
    +v) vrb_opts__+=( ${(z)OPTARG} ) ;;
    # Default to 'no'
    n) default__=no ;;
    # Default to 'yes'
    y) default__=yes ;;
    # Errors
    ':') shu::panic "Missing argument to option: ${(l:2::-:)OPTARG}" ;;
    '?') shu::panic "Invalid option: ${(l:2::-:)OPTARG}" ;;
    *)   shu::panic "Invalid option: ${(l:2::-:)opt__}" ;;
  esac
done

shift $(( OPTIND - 1 ))

1=${${(j< >)@}//((#s)[[:space:]]##|[[:space:]]##(#e))/}
: ${1:='Continue?'}

case $default__ in
  no)  1+=" ${SHU_ANSI[dim:on]}[no]${SHU_ANSI[dim:off]}" ;;
  yes) 1+=" ${SHU_ANSI[dim:on]}[yes]${SHU_ANSI[dim:off]}" ;;
esac

1=$( shu:io:putf $vrb_opts__ '%s ' $1 )

[[ -t 0 ]] && {
  setopt local_options no_auto_list no_bang_hist no_beep menu_complete
  bindkey -M ask &> /dev/null || {
    bindkey -N ask emacs
    bindkey -M ask '\e[3~' delete-char
  }
}

for (( ;; )); do
  reply__=

  if [[ -t 0 ]]; then
    trap 'return 2' SIGINT
    vared -M ask -ep "${1}" reply__ || return 2
    trap - SIGINT
  else
    print -rn -- $1
    read -r reply__
    print -r -- $reply__
  fi

  reply__=${reply__//((#s)[[:space:]]##|[[:space:]]##(#e))/}
  : ${reply__:=${default__}}

  [[ $reply__ == (#i)(n(|o*)|y(|es*)) ]] && {
    (( $#to_scalar__ )) && : ${(P)to_scalar__::=${reply__}}
    [[ $reply__ == [Yy]* ]] && return 0
    return 1
  }

  [[ -n $reply__ ]] &&
  shu:io:eputf $vrb_opts__ 'Unrecognised input: %s\n' $reply__
done

return 0
