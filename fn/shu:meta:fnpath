# vim: set ft=zsh:

##
# Get the file path associated with a function.
#
# The specified function will be auto-loaded if necessary.
#
# @todo Support multiple operands.
#
# @module meta
#
# @param +s <name>
#   (optional) Assign the result to a pre-defined scalar with the name <name>.
#
# @param $1 The name of a function to look up the path for.
#
# @return 0 if file path was found, >0 otherwise.

local OPTARG OPTIND opt__ to_scalar__ path__

while getopts :s: opt__; do
  case $opt__ in
    # Assign result to scalar
    +s)
      (( ${(P)+OPTARG} )) ||
      shu::panic "No such scalar: $OPTARG"

      if [[ "${(Pt)OPTARG}-" != scalar-* ]] && [[ $OPTARG != *\[* ]]; then
        shu::panic "No such scalar: $OPTARG"
      fi

      to_scalar__=$OPTARG
      ;;
    # Errors
    ':') shu::panic "Missing argument to option: ${(l:2::-:)OPTARG}" ;;
    '?') opt__=$OPTARG ;&
    *)   shu::panic "Invalid option: ${(l:2::-:)opt__}" ;;
  esac
done

shift $(( OPTIND - 1 ))

(( $# < 1 )) && shu::panic 'Too few operands'
(( $# > 1 )) && shu::panic 'Too many operands'

(( $+functions[$1] )) || shu::panic "No such function: ${1:--}"

autoload +X -Uz -- $1 &> /dev/null

path__=${"$( whence -v -- $1 )"#* is a shell function from }

path__=${path__:a}
[[ $path__ == /* ]] || path__=

(( $#to_scalar__ )) && {
  : ${(P)to_scalar__::=${path__}}
  return $(( ! $#path__ ))
}

(( $#path__ )) || return 1
print -r -- $path__
