# vim: set ft=zsh:

##
# Get the file path associated with a function.
#
# The specified function will be auto-loaded if necessary.
#
# @todo Support multiple operands.
#
# @module meta
#
# @param +s <name>
#   (optional) Assign the result to a pre-defined scalar with the name <name>.
#
# @param $1 The name of a function to look up the path for.
#
# @return 0 if file path was found, >0 otherwise.

local OPTARG OPTIND __opt __to_scalar __path

while getopts :s: __opt; do
  case $__opt in
    # Assign result to scalar
    +s)
      (( ${(P)+OPTARG} )) ||
      shu::panic "No such scalar: ${OPTARG}"
      [[ "${(Pt)OPTARG}-" == scalar-* ]] ||
      shu::panic "No such scalar: ${OPTARG}"

      __to_scalar=$OPTARG
      ;;
    # Errors
    ':') shu::panic "Missing argument to option: ${(l:2::-:)OPTARG}" ;;
    '?') shu::panic "Invalid option: ${(l:2::-:)OPTARG}" ;;
    *)   shu::panic "Invalid option: ${(l:2::-:)__opt}" ;;
  esac
done

shift $(( OPTIND - 1 ))

(( $# < 1 )) && shu::panic 'Too few arguments'
(( $# > 1 )) && shu::panic 'Too many arguments'

(( $+functions[$1] )) || shu::panic "No such function: ${1:--}"

autoload +X -Uz $1 &> /dev/null

__path=${"$( whence -v $1 )"#* is a shell function from }

[[ $__path == /* ]] || __path=

(( $#__to_scalar )) && {
  : ${(P)__to_scalar::=${__path}}
  return $(( ! $#__path ))
}

(( $#__path )) || return 1
print -r -- $__path
