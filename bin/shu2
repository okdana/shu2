#!/usr/bin/env zsh

#?. shu2 front-end utility v:0.1
#?:
#?= Interact with shu2 library features from the command line.
#?:
#?# usage:
#??   ${0} -h|-V
#??   ${0} -l [<pattern>]
#??   ${0} -H|-p <function>
#??   ${0} [-qvtTx] [-o <param=val>] <function> [<arg> ...]
#?:
#?# operands:
#?+   <pattern>       A pattern with which to limit `-l` output.
#?+   <function>      The name of a shu2/consumer function.
#?+   <arg> ...       Zero or more arguments to the function.
#?:
#?# options:
#?+   -h              Display this usage help and exit.
#?+   -H              Display documentation for the specified function and exit.
#?+   -l              List all shu2/consumer functions and exit.
#?+   -o <param=val>  Define the value of a special parameter.
#?+   -p              Display the path of the specified function and exit.
#?+   -q              Decrease output verbosity.
#?+   -t, -x          Enable function xtrace (like `typeset -t`).
#?+   -T, -X          Enable function xtrace (like `typeset -T`).
#?+   -v              Increase output verbosity.
#?+   -V              Display version information and exit.
#?:
#?# notes:
#?:   The parameters `reply_scalar`, `reply_array`, and `reply_assoc` are made
#?:   available for testing functions that accept `+s`, `+a`, and `+A`,
#?:   respectively. Their values (if any) are shown in the `-v` output.

if (( $+functions[shu::noop] )); then
  : # Library is already loaded
else
  # Don't read this from the environment
  unset SHU2_FNS_PATTERN

  if [[ -e ${0:A:h}/../lib ]]; then
    source ${0:A:h}/../lib || return 166
  else
    source /usr/local/lib/shu2/lib || return 166
  fi
fi

(( $+SHU2_FNS_PATTERN )) ||
typeset -g SHU2_FNS_PATTERN='shu:*:*'

app::main() {
  local    OPTARG OPTIND opt
  local    mode verbosity=0 xtrace func ret o start end
  local -a options

  local    reply_scalar
  local -a reply_array
  local -A reply_assoc

  while getopts :hHlo:pqtTvxXV opt; do
    case $opt in
      h)   shu:meta:help; return 0 ;;
      H)   mode=doc ;;
      l)   mode=fns ;;
      o)   options+=( $OPTARG ) ;;
      p)   mode=fnpath ;;
      q)   verbosity=-1 ;;
      v)   verbosity=1 ;;
      t|x) xtrace=t ;;
      T|X) xtrace=T ;;
      V)   shu:meta:help -V; return 0 ;;
      ':') shu::panic "Missing argument to option: ${(l:2::-:)OPTARG}" ;;
      '?') shu::panic "Invalid option: ${(l:2::-:)OPTARG}" ;;
      *)   shu::panic "Invalid option: ${(l:2::-:)opt}" ;;
    esac
  done

  shift $(( OPTIND - 1 ))

  [[ $mode == fns ]] && {
    shu:meta:fns ${1:-${SHU2_FNS_PATTERN:-}}
    return
  }

  (( $# )) || shu::panic 'Expected function name'

  func=$1
  shift

  [[ $func == ${~SHU2_FNS_PATTERN} ]] ||
  shu::panic "Unsupported function: ${func}"

  (( $+functions[$func] )) ||
  shu::panic "No such function: ${func}"

  (( $#mode && $# )) &&
  shu::panic 'Too many operands'

  [[ $mode == fnpath ]] && {
    shu:meta:fnpath $func
    return
  }

  [[ $mode == doc ]] && {
    shu:meta:doc $func
    return
  }

  for o in $options; do
    [[ $o == [A-Z][A-Z0-9_]##'='* ]] ||
    shu::panic "Illegal option assignment: ${o}"

    [[ -v ${o%%=*} ]] ||
    shu::panic "Unrecognised option: ${o%%=*}"

    typeset "${o%%=*}=${o#*=}"
  done

  (( verbosity > 0 )) &&
  printf >&$SHU_FD_STDERR '%s>>> %s %s%s\n' \
    "${SHU_ANSI[bold:on]}" \
    $func "${(j< >)${(q-)@}}" \
    "${SHU_ANSI[reset]}"

  start=$SECONDS
  (( $#xtrace )) && typeset -f -$xtrace $func
  () { SHU_PANIC_IGNORE=1; $func "${@}" } "${@}"
  ret=$?
  (( $#xtrace )) && typeset -f +$xtrace $func
  end=$SECONDS

  (( verbosity > 0 )) && {
    if (( ret )); then
      print -n - "${SHU_ANSI[fg:red]}"
    else
      print -n - "${SHU_ANSI[fg:green]}"
    fi

    printf '<<< %s (%d Âµs)' $ret $(( (end - start) * 1_000_000 ))

    if (( $#reply_scalar )); then
      printf ' [%s]' "${(j< >)${(f)"$( typeset -p reply_scalar )"}#typeset }"
    elif (( $#reply_array )); then
      printf ' [%s]' "${(j< >)${(f)"$( typeset -p reply_array )"}#typeset -a }"
    elif (( $#reply_assoc )); then
      printf ' [%s]' "${(j< >)${(f)"$( typeset -p reply_assoc )"}#typeset -A }"
    fi

    print - "${SHU_ANSI[reset]}"
  } >&$SHU_FD_STDERR

  return ret
}

[[ $zsh_eval_context == toplevel ]] && {
  app::main "${@}"
  return
}
return 0
